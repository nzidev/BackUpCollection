// <auto-generated />
using System;
using BackUpCollectionDAL.DataBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackUpCollectionDAL.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    partial class CoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.ADOConnectionString", b =>
                {
                    b.Property<int>("ADOConnectionStringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isMailSend")
                        .HasColumnType("bit");

                    b.HasKey("ADOConnectionStringId");

                    b.ToTable("ADOConnectionStrings");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.BackupLog", b =>
                {
                    b.Property<int>("BackupLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BackupLogId");

                    b.ToTable("BackupLogs");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kompleks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Podsistema")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resurs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.Delay", b =>
                {
                    b.Property<int>("DelayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DelayId");

                    b.ToTable("Delays");

                    b.HasData(
                        new
                        {
                            DelayId = 1,
                            Name = ""
                        });
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.Frequency", b =>
                {
                    b.Property<int>("FrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrequencyId");

                    b.ToTable("Frequencies");

                    b.HasData(
                        new
                        {
                            FrequencyId = 1,
                            Name = ""
                        });
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.MailSetting", b =>
                {
                    b.Property<int>("MailSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Server")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MailSettingId");

                    b.ToTable("MailSettings");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.MainEvent", b =>
                {
                    b.Property<int>("MainEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<int>("DelayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int");

                    b.Property<int>("JobID")
                        .HasColumnType("int");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("MasterServerId")
                        .HasColumnType("int");

                    b.Property<int>("MediaServerId")
                        .HasColumnType("int");

                    b.Property<int>("ParrentId")
                        .HasColumnType("int");

                    b.Property<int>("PolicyId")
                        .HasColumnType("int");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("SizeHumanRead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Speed")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("Status")
                        .HasColumnType("bigint");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool>("isParent")
                        .HasColumnType("bit");

                    b.HasKey("MainEventId");

                    b.HasIndex("ClientId");

                    b.HasIndex("DelayId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MasterServerId");

                    b.HasIndex("MediaServerId");

                    b.HasIndex("PolicyId");

                    b.ToTable("MainEvents");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.MasterServer", b =>
                {
                    b.Property<int>("MasterServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpsId")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MasterServerId");

                    b.ToTable("MasterServers");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.MediaServer", b =>
                {
                    b.Property<int>("MediaServerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MediaServerId");

                    b.ToTable("MediaServers");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.Policy", b =>
                {
                    b.Property<int>("PolicyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PolicyId");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.Progress", b =>
                {
                    b.Property<int>("ProgressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentPos")
                        .HasColumnType("int");

                    b.Property<int>("Total")
                        .HasColumnType("int");

                    b.Property<string>("serviceName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProgressId");

                    b.ToTable("Progresses");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.ServiceSetting", b =>
                {
                    b.Property<int>("ServiceSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ADOConnectionStringId")
                        .HasColumnType("int");

                    b.Property<int>("DelayMs")
                        .HasColumnType("int");

                    b.Property<byte>("HalfPolicies")
                        .HasColumnType("tinyint");

                    b.Property<int>("MailSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<bool>("UpdateDelayAndFrequency")
                        .HasColumnType("bit");

                    b.HasKey("ServiceSettingId");

                    b.HasIndex("ADOConnectionStringId");

                    b.HasIndex("MailSettingId");

                    b.ToTable("ServiceSettings");
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.MainEvent", b =>
                {
                    b.HasOne("BackUpCollectionDAL.DataBase.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.Delay", "Delay")
                        .WithMany()
                        .HasForeignKey("DelayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.Frequency", "Frequency")
                        .WithMany()
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.MasterServer", "MasterServer")
                        .WithMany()
                        .HasForeignKey("MasterServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.MediaServer", "MediaServer")
                        .WithMany()
                        .HasForeignKey("MediaServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackUpCollectionDAL.DataBase.ServiceSetting", b =>
                {
                    b.HasOne("BackUpCollectionDAL.DataBase.ADOConnectionString", "ADOConnectionString")
                        .WithMany()
                        .HasForeignKey("ADOConnectionStringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackUpCollectionDAL.DataBase.MailSetting", "MailSetting")
                        .WithMany()
                        .HasForeignKey("MailSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
